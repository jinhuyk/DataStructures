package Assignment3;

public class StackQueue implements Queue {
	
	ArrayStack inStack;
	ArrayStack outStack;
	
	public StackQueue(int N) {
		inStack = new ArrayStack(N);
		outStack = new ArrayStack(N);
	}
	@Override
	public int size() {
		return inStack.size() + outStack.size();
	}

	@Override
	public boolean isEmpty() {
		return inStack.isEmpty() && inStack.isEmpty();
	}

	@Override
	public char front() {
		if (outStack.isEmpty()) {
			while(!inStack.isEmpty()) {
				outStack.push(inStack.pop());
			}
		}
		return outStack.top();
	}

	@Override
	public void enqueue(char o) {
		inStack.push(o);
	}

	@Override
	public char dequeue() {
		if (outStack.isEmpty()) {
			while(!inStack.isEmpty()) {
				outStack.push(inStack.pop());
			}
		}
		return outStack.pop();
	}

	public static void main(String[] args) {
		StackQueue queue = new StackQueue(40);
		
		for(char i = 97;i<81;i++) {
			queue.enqueue(i);
		}
		System.out.println(queue.dequeue());
		
	}

}
